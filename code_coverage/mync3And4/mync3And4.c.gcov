        -:    0:Source:mync3And4.c
        -:    0:Graph:mync3And4.gcno
        -:    0:Data:mync3And4.gcda
        -:    0:Runs:3
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <sys/wait.h>
        -:    5:#include <string.h>
        -:    6:#include <fcntl.h>
        -:    7:#include <sys/types.h>
        -:    8:#include <sys/socket.h>
        -:    9:#include <netinet/in.h>
        -:   10:#include <arpa/inet.h>
        -:   11:#include <netdb.h>
        -:   12:#include <errno.h>
        -:   13:#include <signal.h>
        -:   14:#include <sys/un.h> // For Unix domain sockets
        -:   15:#include <sys/select.h> // For fd_set and select
        -:   16:
        -:   17:#define BUFFER_SIZE 1024
        -:   18:
        -:   19:int input_fd = STDIN_FILENO;
        -:   20:int output_fd = STDOUT_FILENO;
        -:   21:int input_port = 0;
        -:   22:struct sockaddr_in udp_server_addr; // Store UDP server address
        -:   23:
        -:   24:/// @brief Function to create a TCP server
        -:   25:/// @param port
        -:   26:/// @return socket file descriptor
function create_tcp_server called 1 returned 100% blocks executed 57%
        1:   27:int create_tcp_server(int port) {
        -:   28:    // Socket file descriptor
        -:   29:    int sockfd; //This will be used to reference the socket throughout its lifetime.
        -:   30:    struct sockaddr_in server_addr; // A structure that holds the address and port on which the server socket will listen for incoming connections.
        -:   31:
        -:   32:    /* High-level of struct sockaddr_in:
        -:   33:
        -:   34:    struct sockaddr_in {
        -:   35:        short            sin_family;   // address family, e.g. AF_INET
        -:   36:        unsigned short   sin_port;     //  port number for the socket
        -:   37:        struct in_addr   sin_addr;     //  structure to hold the IPv4 address(binary representation of the IP address for the socket)
        -:   38:        char             sin_zero[8];  // so it will be competible with the generic struct sockaddr
        -:   39:    };
        -:   40:
        -:   41:    struct in_addr {
        -:   42:        unsigned long s_addr; //where we hold the ip address 
        -:   43:    };
        -:   44:    */
        -:   45:
        -:   46:    /*
        -:   47:    AF_INET: Specifies the address family (IPv4). we chose IPv4 because it ensures compatibility with a vast majority of existing networks and devices.
        -:   48:    SOCK_STREAM: Specifies the socket type (TCP).
        -:   49:    0: means that the system should automatically choose the appropriate protocol for the given socket type. For SOCK_STREAM with AF_INET, this will be TCP..
        -:   50:    */
        1:   51:    sockfd = socket(AF_INET, SOCK_STREAM, 0);
call    0 returned 100%
        1:   52:    if (sockfd < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:        perror("socket");
call    0 never executed
    #####:   54:        return -1;
        -:   55:    }
        -:   56:
        -:   57:    // allows the socket to reuse the local address
        1:   58:    int val = 1;
        1:   59:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   60:        perror("setsockopt");
call    0 never executed
        -:   61:    }
        -:   62:
        1:   63:    memset(&server_addr, 0, sizeof(server_addr));  //ensures that the server_addr structure is fully initialized to zero
        -:   64:
        -:   65:    //we chose AF_INET as the address family for the socket(specifying that the socket will use IPv4 addresses, a protocol for transmitting data over the internet)
        -:   66:    //there are many protocols in AF_INET, among them the most popular are TCP and UDP. we will use TCP.
        1:   67:    server_addr.sin_family = AF_INET;
        1:   68:    server_addr.sin_addr.s_addr = INADDR_ANY; // 0.0.0.0 in IPv4, it will accept connections on all available networks.
        1:   69:    server_addr.sin_port = htons(port); //convert the representation of the port into big-endian(the expected network byte order).
        -:   70:
        -:   71:    /* bind is associating a socket with a specific local address and port number
        -:   72:    sockfd - file descriptor of the socket.
        -:   73:    (struct sockaddr *)&server_addr - pointer to a sockaddr structure that contains the address to which the socket will bound.
        -:   74:    sizeof(server_addr) - size of the server_addr structure, tells the bind how much memory to read.
        -:   75:    */
        1:   76:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   77:        perror("bind");
call    0 never executed
    #####:   78:        close(sockfd);
call    0 never executed
    #####:   79:        return -1;
        -:   80:    }
        -:   81:
        -:   82:    /* tells the operating system that the program is ready to accept incoming connections on the socket sockfd.
        -:   83:    sockfd - file descriptor of the socket.
        -:   84:    1 - backlog parameter, 
        -:   85:    When a client attempts to connect to the server, the connection is placed in a queue if the server is not immediately ready to accept it. 
        -:   86:    The backlog parameter determines the size of this queue.
        -:   87:    */
        1:   88:    if (listen(sockfd, 1) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   89:        perror("listen");
call    0 never executed
    #####:   90:        close(sockfd);
call    0 never executed
    #####:   91:        return -1;
        -:   92:    }
        -:   93:
        1:   94:    printf("Server listening on port %d\n", port);
call    0 returned 100%
        -:   95:
        -:   96:    struct sockaddr_in client_addr;
        1:   97:    socklen_t client_len = sizeof(client_addr);
        1:   98:    int client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &client_len);
call    0 returned 100%
        1:   99:    if (client_fd < 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  100:        perror("accept");
call    0 never executed
    #####:  101:        close(sockfd);
call    0 never executed
    #####:  102:        exit(EXIT_FAILURE);
call    0 never executed
        -:  103:    }
        -:  104:
        1:  105:    printf("Client connected from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port)); //convert from a binary format into IPv4 format
call    0 returned 100%
call    1 returned 100%
        1:  106:    return client_fd;
        -:  107:}
        -:  108:
        -:  109:// Function to start a TCP client
function start_tcp_client called 0 returned 0% blocks executed 0%
    #####:  110:int start_tcp_client(char *hostname, int port) {
        -:  111:    int sockfd;
        -:  112:    struct sockaddr_in server_addr;
        -:  113:
    #####:  114:    sockfd = socket(AF_INET, SOCK_STREAM, 0);
call    0 never executed
    #####:  115:    if (sockfd < 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  116:        perror("socket");
call    0 never executed
    #####:  117:        return -1;
        -:  118:    }
        -:  119:
        -:  120:    // allows the socket to reuse the local address
    #####:  121:    int val = 1;
    #####:  122:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)) == -1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  123:        perror("setsockopt");
call    0 never executed
        -:  124:    }
        -:  125:
    #####:  126:    memset(&server_addr, 0, sizeof(server_addr)); //  reset server_addr to 0
    #####:  127:    server_addr.sin_family = AF_INET; //set address family to AF_INET
    #####:  128:    server_addr.sin_port = htons(port); // convert the port to big-endian.
        -:  129:
    #####:  130:    if (inet_pton(AF_INET, hostname, &server_addr.sin_addr) <= 0) {  //converts the hostname (a string) to an IP address and stores it in server_addr.sin_addr.
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  131:        fprintf(stderr, "Invalid address/ Address not supported\n");
call    0 never executed
    #####:  132:        close(sockfd);
call    0 never executed
    #####:  133:        return -1;
        -:  134:    }
        -:  135:
    #####:  136:    printf("Connecting to %s:%d\n", hostname, port);
call    0 never executed
        -:  137:
    #####:  138:    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  139:        perror("connect");
call    0 never executed
    #####:  140:        close(sockfd);
call    0 never executed
    #####:  141:        return -1;
        -:  142:    }
        -:  143:
    #####:  144:    printf("Client connected to %s on port %d\n", hostname, port);
call    0 never executed
    #####:  145:    return sockfd;
        -:  146:}
        -:  147:
        -:  148:/// @brief Function to create a UDP server
        -:  149:/// @param port 
        -:  150:/// @return socket file descriptor
function create_udp_server called 0 returned 0% blocks executed 0%
    #####:  151:int create_udp_server(int port) {
        -:  152:    int sockfd;
        -:  153:    struct sockaddr_in server_addr;
        -:  154:
    #####:  155:    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
call    0 never executed
    #####:  156:    if (sockfd < 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  157:        perror("socket");
call    0 never executed
    #####:  158:        return -1;
        -:  159:    }
        -:  160:
    #####:  161:    int val = 1;
    #####:  162:    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)) == -1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  163:        perror("setsockopt");
call    0 never executed
        -:  164:    }
        -:  165:
        -:  166:    //UDP is connectionless. There is no need for the server to listen for connections or establish a connection before data can be sent or received.
        -:  167:
    #####:  168:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  169:    server_addr.sin_family = AF_INET;
    #####:  170:    server_addr.sin_addr.s_addr = INADDR_ANY;
    #####:  171:    server_addr.sin_port = htons(port);
        -:  172:
    #####:  173:    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  174:        perror("bind");
call    0 never executed
    #####:  175:        close(sockfd);
call    0 never executed
    #####:  176:        return -1;
        -:  177:    }
        -:  178:
    #####:  179:    printf("UDP Server listening on port %d\n", port);
call    0 never executed
    #####:  180:    return sockfd;
        -:  181:}
        -:  182:
        -:  183:/// @brief Function to start a UDP client
        -:  184:/// @param hostname 
        -:  185:/// @param port 
        -:  186:/// @return socket file descriptor
function start_udp_client called 0 returned 0% blocks executed 0%
    #####:  187:int start_udp_client(char *hostname, int port) {
        -:  188:    int sockfd;
        -:  189:    struct sockaddr_in server_addr;
        -:  190:
    #####:  191:    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
call    0 never executed
    #####:  192:    if (sockfd < 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  193:        perror("socket");
call    0 never executed
    #####:  194:        return -1;
        -:  195:    }
        -:  196:
    #####:  197:    memset(&server_addr, 0, sizeof(server_addr));
    #####:  198:    server_addr.sin_family = AF_INET;
    #####:  199:    server_addr.sin_port = htons(port);
        -:  200:
    #####:  201:    if (inet_pton(AF_INET, hostname, &server_addr.sin_addr) <= 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  202:        fprintf(stderr, "Invalid address/ Address not supported\n");
call    0 never executed
    #####:  203:        close(sockfd);
call    0 never executed
    #####:  204:        return -1;
        -:  205:    }
        -:  206:
    #####:  207:    udp_server_addr = server_addr; // Store the server address
        -:  208:
    #####:  209:    printf("UDP Client connecting to %s:%d\n", hostname, port);
call    0 never executed
    #####:  210:    return sockfd;
        -:  211:}
        -:  212:
        -:  213:// Signal handler for alarm
function handle_alarm called 0 returned 0% blocks executed 0%
    #####:  214:void handle_alarm(int sig) {
    #####:  215:    printf("Timeout reached, terminating the process\n");
call    0 never executed
    #####:  216:    exit(EXIT_SUCCESS);
        -:  217:}
        -:  218:
        -:  219:/// @brief Function to parse TCP/UDP/UDS parameters
        -:  220:/// @param param TCP configuration information
        -:  221:/// @return 1 on Success, 0 on fail
function parse_parameter called 1 returned 100% blocks executed 11%
        1:  222:void parse_parameter(char *param) {
        -:  223:    int port;
        1:  224:    if (strncmp(param, "TCPS", 4) == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  225:        port = atoi(param + 4);
        1:  226:        input_port = port;
        1:  227:        printf("Creating TCP server on port %d\n", port);
call    0 returned 100%
        1:  228:        input_fd = create_tcp_server(port);
call    0 returned 100%
        1:  229:        if (input_fd == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  230:            fprintf(stderr, "Failed to create TCP server\n");
call    0 never executed
    #####:  231:            exit(EXIT_FAILURE);
call    0 never executed
        -:  232:        }
    #####:  233:    } else if (strncmp(param, "TCPC", 4) == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  234:        param += 4;
    #####:  235:        char *hostname = strtok(param, ",");
call    0 never executed
    #####:  236:        char *port_str = strtok(NULL, ",");
call    0 never executed
    #####:  237:        if (hostname == NULL || port_str == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  238:            fprintf(stderr, "Invalid client parameters\n");
call    0 never executed
    #####:  239:            exit(EXIT_FAILURE);
call    0 never executed
        -:  240:        }
    #####:  241:        int port = atoi(port_str);
    #####:  242:        if (port == input_port) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  243:            output_fd = input_fd;
    #####:  244:            return;
        -:  245:        }
    #####:  246:        printf("Connecting to TCP server at %s:%d\n", hostname, port);
call    0 never executed
    #####:  247:        if (strcmp(hostname, "localhost") == 0) { hostname = "127.0.0.1"; }
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  248:        output_fd = start_tcp_client(hostname, port);
call    0 never executed
    #####:  249:        if (output_fd == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  250:            fprintf(stderr, "Failed to connect to TCP server\n");
call    0 never executed
    #####:  251:            exit(EXIT_FAILURE);
call    0 never executed
        -:  252:        }
    #####:  253:    } else if (strncmp(param, "UDPS", 4) == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  254:        port = atoi(param + 4);
    #####:  255:        input_port = port;
    #####:  256:        printf("Creating UDP server on port %d\n", port);
call    0 never executed
    #####:  257:        input_fd = create_udp_server(port);
call    0 never executed
    #####:  258:        if (input_fd == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  259:            fprintf(stderr, "Failed to create UDP server\n");
call    0 never executed
    #####:  260:            exit(EXIT_FAILURE);
call    0 never executed
        -:  261:        }
    #####:  262:    } else if (strncmp(param, "UDPC", 4) == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  263:        param += 4;
    #####:  264:        char *hostname = strtok(param, ",");
call    0 never executed
    #####:  265:        char *port_str = strtok(NULL, ",");
call    0 never executed
    #####:  266:        if (hostname == NULL || port_str == NULL) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  267:            fprintf(stderr, "Invalid client parameters\n");
call    0 never executed
    #####:  268:            exit(EXIT_FAILURE);
call    0 never executed
        -:  269:        }
    #####:  270:        int port = atoi(port_str);
    #####:  271:        printf("Connecting to UDP server at %s:%d\n", hostname, port);
call    0 never executed
    #####:  272:        if (strcmp(hostname, "localhost") == 0) { hostname = "127.0.0.1"; }
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  273:                printf("%s,%d",hostname,port);
call    0 never executed
    #####:  274:        output_fd = start_udp_client(hostname, port);
call    0 never executed
    #####:  275:        printf("2-%d",output_fd);
call    0 never executed
    #####:  276:        if (output_fd == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  277:            fprintf(stderr, "Failed to connect to UDP server\n");
call    0 never executed
    #####:  278:            exit(EXIT_FAILURE);
call    0 never executed
        -:  279:        }
        -:  280:    }
        -:  281:}
        -:  282:
        -:  283:// Function to send data to the UDP server
function send_to_udp called 0 returned 0% blocks executed 0%
    #####:  284:void send_to_udp(int sockfd, char *data, int length) {
    #####:  285:    if (sendto(sockfd, data, length, 0, (struct sockaddr *)&udp_server_addr, sizeof(udp_server_addr)) < 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  286:        perror("sendto");
call    0 never executed
        -:  287:    }
    #####:  288:}
        -:  289:
function main called 1 returned 200% blocks executed 67%
        1:  290:int main(int argc, char *argv[]) { 
        1:  291:    if (argc < 3) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  292:        fprintf(stderr, "Usage: %s -e <program> [args...] -i <input> -o <output> -b <both> -t <timeout>\n", argv[0]);
call    0 never executed
    #####:  293:        return 1;
        -:  294:    }
        -:  295:
        1:  296:    char *program = NULL;
        1:  297:    char input_param[256] = "";
        1:  298:    char output_param[256] = "";
        1:  299:    int timeout = 0;
        1:  300:    int i = 2; // because the first two arguments are the program name and the -e flag.
        -:  301:
        1:  302:    int length = 0;
        2:  303:    for (; i < argc && argv[i][0] != '-'; i++) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
        1:  304:        length += strlen(argv[i]) + 1; // length of the program
        -:  305:    }
        -:  306:
        1:  307:    program = malloc(length);
        1:  308:    if (!program) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  309:        perror("malloc");
call    0 never executed
    #####:  310:        exit(EXIT_FAILURE);
call    0 never executed
        -:  311:    }
        -:  312:
        1:  313:    program[0] = '\0';
        2:  314:    for (i = 2; i < argc && argv[i][0] != '-'; i++) { // extract the program string from argv.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
        1:  315:        strcat(program, argv[i]);
        1:  316:        if (i < argc - 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  317:            strcat(program, " ");
        -:  318:        }
        -:  319:    }
        -:  320:
        1:  321:    printf("Program to execute: %s\n", program);
call    0 returned 100%
        -:  322:
        1:  323:    int isBoth = 0;
        3:  324:    for (; i < argc; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  325:        if (strcmp(argv[i], "-i") == 0 && i + 1 < argc) { // ensures also that there is another argument after -i.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  326:            strcpy(input_param, argv[++i]);
        1:  327:            printf("Input parameter: %s\n", input_param);
call    0 returned 100%
       1*:  328:        } else if (strcmp(argv[i], "-o") == 0 && i + 1 < argc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  329:            strcpy(output_param, argv[++i]);
    #####:  330:            printf("Output parameter: %s\n", output_param);
call    0 never executed
       1*:  331:        } else if (strcmp(argv[i], "-b") == 0 && i + 1 < argc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  332:            strcpy(input_param, argv[++i]);
    #####:  333:            strcpy(output_param, argv[i]);
    #####:  334:            isBoth = 1;
    #####:  335:            printf("Both parameter: %s\n", input_param);
call    0 never executed
        1:  336:        } else if (strcmp(argv[i], "-t") == 0 && i + 1 < argc) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  337:            timeout = atoi(argv[++i]);
        1:  338:            printf("Timeout parameter: %d\n", timeout);
call    0 returned 100%
        -:  339:        }
        -:  340:    }
        -:  341:
        1:  342:    if (timeout > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  343:        signal(SIGALRM, handle_alarm); // will be executed when the signal is received. will also execute the handle_alarm function.
call    0 returned 100%
        1:  344:        alarm(timeout); //an alarm signal set to be delivered after a specified number of seconds.
call    0 returned 100%
        -:  345:    }
        -:  346:
        1:  347:    if (strlen(input_param) > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  348:        parse_parameter(input_param);
call    0 returned 100%
        -:  349:    }
        -:  350:
        1:  351:    if (strlen(output_param) > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  352:        if (isBoth) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  353:            output_fd = input_fd;
        -:  354:        } else {
    #####:  355:            parse_parameter(output_param);
call    0 never executed
        -:  356:        }
        -:  357:    }
        -:  358:
        1:  359:    if (input_fd != STDIN_FILENO) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  360:        if (dup2(input_fd, STDIN_FILENO) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  361:            perror("dup2 input");
call    0 never executed
    #####:  362:            exit(EXIT_FAILURE);
call    0 never executed
        -:  363:        }
        -:  364:    }
        -:  365:
       1*:  366:    if (output_fd != STDOUT_FILENO && strstr(output_param, "UDPC") == NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  367:        if (dup2(output_fd, STDOUT_FILENO) == -1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  368:            perror("dup2 output");
call    0 never executed
    #####:  369:            exit(EXIT_FAILURE);
call    0 never executed
        -:  370:        }
        -:  371:    }
        -:  372:
        1:  373:    pid_t pid = fork();
call    0 returned 200%
        2:  374:    if (pid == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  375:        perror("fork");
call    0 never executed
    #####:  376:        exit(EXIT_FAILURE);
call    0 never executed
        -:  377:    }
        -:  378:
        2:  379:    if (pid == 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  380:        int pipe_fd[2];
        1:  381:        if (pipe(pipe_fd) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  382:            perror("pipe");
call    0 never executed
    #####:  383:            exit(EXIT_FAILURE);
call    0 never executed
        -:  384:        }
        -:  385:
        1:  386:        pid_t child_pid = fork();
call    0 returned 200%
        2:  387:        if (child_pid == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  388:            perror("fork");
call    0 never executed
    #####:  389:            exit(EXIT_FAILURE);
call    0 never executed
        -:  390:        }
        -:  391:
        2:  392:        if (child_pid == 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  393:            close(pipe_fd[0]);
call    0 returned 100%
        1:  394:            if (dup2(pipe_fd[1], STDOUT_FILENO) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  395:                perror("dup2");
call    0 never executed
    #####:  396:                exit(EXIT_FAILURE);
call    0 never executed
        -:  397:            }
        1:  398:            close(pipe_fd[1]);
call    0 returned 100%
        -:  399:
        1:  400:            execlp("/bin/sh", "sh", "-c", program, (char *)NULL);
        1:  401:            perror("execlp");
call    0 returned 0%
    #####:  402:            exit(EXIT_FAILURE);
call    0 never executed
        -:  403:        } else {
        1:  404:            close(pipe_fd[1]);
call    0 returned 100%
        -:  405:            char buffer[BUFFER_SIZE];
        -:  406:            ssize_t bytes_read;
        5:  407:            while ((bytes_read = read(pipe_fd[0], buffer, sizeof(buffer))) > 0) {
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        4:  408:                if (strstr(output_param, "UDPC") != NULL) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  409:                    send_to_udp(output_fd, buffer, bytes_read);
call    0 never executed
        -:  410:                } else {
        4:  411:                    if (write(output_fd, buffer, bytes_read) == -1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  412:                        perror("write");
call    0 never executed
    #####:  413:                        exit(EXIT_FAILURE);
call    0 never executed
        -:  414:                    }
        -:  415:                }
        -:  416:            }
        1:  417:            close(pipe_fd[0]);
call    0 returned 100%
        1:  418:            wait(NULL);
call    0 returned 100%
        -:  419:        }
        -:  420:    } else {
        1:  421:        wait(NULL);
call    0 returned 100%
        -:  422:    }
        -:  423:
        2:  424:    free(program);
        2:  425:    return EXIT_SUCCESS;
        -:  426:}
        -:  427:
        -:  428:/* HOW TO RUN:
        -:  429:
        -:  430:1)  ./mync3And4 -e "./ttt 123456789" -i TCPS4050 -t 10
        -:  431:    nc localhost 4050
        -:  432:
        -:  433:2)  ./mync3And4 -e "./ttt 123456789" -o TCPClocalhost4455 -t 10
        -:  434:    nc -l 4455
        -:  435:
        -:  436:3)  ./mync3And4 -e "./ttt 123456789" -b TCPS4050 -t 10
        -:  437:    nc localhost 4050
        -:  438:
        -:  439:4)  ./mync3And4 -e "./ttt 123456789" -i TCPS4050 -o TCPClocalhost4455 -t 10
        -:  440:    nc -l 4455
        -:  441:    nc localhost 4050
        -:  442:
        -:  443:5)  ./mync3And4 -e "./ttt 123456789" -i UDPS4050 -t 10
        -:  444:    nc -u localhost 4050
        -:  445:
        -:  446:6)  ./mync3And4 -e "./ttt 123456789" -o UDPClocalhost,4050 -t 10
        -:  447:    nc -u -l -p 4455
        -:  448:
        -:  449:7)  ./mync3And4 -e "./ttt 123456789" -i UDPS4050 -o UDPClocalhost4455 -t 10
        -:  450:    nc -l 4455
        -:  451:    nc localhost 4050
        -:  452:*/
        -:  453:
        -:  454:/* Creating gcov:
        -:  455:
        -:  456:1)  make
        -:  457:2) running the program
        -:  458:3) gcov -b mync3And4.c
        -:  459:*/
